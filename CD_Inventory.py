#------------------------------------------## Title: Assignmen08.py# Desc: Assignnment 08 - Working with classes# Change Log: (Who, When, What)# DBiesinger, 2030-Jan-01, created file# DBiesinger, 2030-Jan-01, added pseudocode to complete assignment 08# Kris Czaja, 2021-12-04, Added code to CD class, imported code from assignment 07# Kris Czaja, 2021-12-05, changed table into list of objects, updated saving/loading to avoid pickle#------------------------------------------## -- DATA -- #strFileName = 'cdInventory.txt'lstOfCDObjects = []strChoice = '' # User inputclass CD():    """Stores data about a CD:    properties:        cd_id: (int) with CD ID        cd_title: (string) with the title of the CD        cd_artist: (string) with the artist of the CD    methods:    """    # TODone Add Code to the CD class        #--Fields--#        #--Constructor--#    def __init__(self, cd_id, title, artist):        #--Attributes--#        self.cd_id = cd_id        self.title = title        self.artist = artist        #--Properties--#    @property    def cd_id(self):        return self.__cd_id        @cd_id.setter    def cd_id(self, value):        if str(value).isnumeric():            self.__cd_id = value        else:            raise Exception('ID must be a number.') # -- PROCESSING -- #class FileIO:    """Processes data to and from file:    properties:    methods:        save_inventory(file_name, lst_Inventory): -> None        load_inventory(file_name): -> (a list of CD objects)    """    # TODO Add code to process data from a file    @staticmethod    def load_inventory(file_name, table):        """Function to manage data ingestion from file to a list of objects        Reads the data from file identified by file_name into a 2D table        (list of objects) table one line in the file represents one dictionary row in table.        Args:            file_name (string): name of file used to read the data from            table (list of objects): 2D data structure (list of objects) that holds the data during runtime        Returns:            None.        """        table.clear()  # this clears existing data and allows to load data from file        try:            with open (file_name, 'r') as objFile:                for line in objFile:                    data = line.strip().split(',')                    formatedData = CD(data[0], data[1], data[2])                    table.append(formatedData)                 return table                objFile.close()                       except Exception as e:            print ('File does not exist.\n')            print ('Following error occured: \n')            print(e)            print(type(e))            print(e.args)            print(e.__doc__)            print(e.__str__())                            return table            objFile.close()    # TODO Add code to process data to a file        @staticmethod    def save_inventory(table,file):        """Function to save inventory to file.                Saves data existing in program memory to a text file in the same format of a 2d table.                Args:            table - 2D data structure (list of dicts) that holds the data during runtime        Returns:            None.                """                    with open(file, 'w') as objFile:          for row in table:                lstValues = [row.cd_id, row.title, row.artist]                lstValues[0] = str(lstValues[0])                objFile.write(','.join(lstValues) + '\n')                  objFile.close()# -- PRESENTATION (Input/Output) -- #class IO:    # TODone add docstring    """Containts user input and output to the user.    properties:    methods:            print_menue - displays a menue of choices to the user            menu_choice - gets user input for menu selection            show_inventory - displays current inventory table            add_input - collects user input for further saving    """    # TODone add code to show menu to user    @staticmethod    def print_menu():        """Displays a menu of choices to the user        Args:            None.        Returns:            None.        """        print('Menu\n\n[l] load Inventory from file\n[a] Add CD\n[i] Display Current Inventory')        print('[s] Save Inventory to file\n[x] exit\n')    # TODone add code to captures user's choice    @staticmethod    def menu_choice():        """Gets user input for menu selection        Args:            None.        Returns:            choice (string): a lower case sting of the users input out of the choices l, a, i, s or x        """        choice = ' '        while choice not in ['l', 'a', 'i', 's', 'x']:            choice = input('Which operation would you like to perform? [l, a, i, s or x]: ').lower().strip()        print()  # Add extra space for layout        return choice    # TODone add code to display the current data on screen    @staticmethod    def show_inventory(table):        """Displays current inventory table        Args:            table (list of objects): 2D data structure (list of objects) that holds the data during runtime.        Returns:            None.        """        print('======= The Current Inventory: =======')        print('ID\tCD Title (by: Artist)\n')        for row in table:            print('{} {}  (by:{})'.format(row.cd_id, row.title, row.artist))        print('======================================')    # TODone add code to get CD data from user    def AddInput():        """Collects user input for further saving.                Args:            None        Returns            None        """        strID = input('Enter ID: ').strip()        strTitle = input('What is the CD\'s title? ').strip()        strArtist = input('What is the Artist\'s name? ').strip()        newCD = strID, strTitle, strArtist        return newCD# -- Main Body of Script -- ## TODone Add Code to the main body# Load data from file into a list of CD objects on script startlstOfCDObjects = FileIO.load_inventory(strFileName, lstOfCDObjects)# Display menu to userwhile True:    IO.print_menu()    strChoice = IO.menu_choice()# let user exit program    if strChoice == 'x':        break    # let user load inventory from file    if strChoice == 'l':        print('WARNING: If you continue, all unsaved data will be lost and the Inventory re-loaded from file.')        strYesNo = input('type \'yes\' to continue and reload from file. otherwise reload will be canceled')                if strYesNo.lower() == 'yes':            print('reloading...')            lstOfCDObjects = FileIO.load_inventory(strFileName, lstOfCDObjects)            IO.show_inventory(lstOfCDObjects)                else:            input('canceling... Inventory data NOT reloaded. Press [ENTER] to continue to the menu.')            IO.show_inventory(lstOfCDObjects)                continue  # start loop back at top.# let user add data to the inventory        elif strChoice == 'a':                strID, strTitle, strArtist = IO.AddInput()        newCD = CD(strID, strTitle, strArtist)                try:            intID = int(strID)            lstOfCDObjects.append(newCD)                    except Exception as e:            print ('ID must be a number\n')            print ('Following error occured: \n')            print(e)            print(type(e))            print(e.args)            print(e.__doc__)            print(e.__str__())        IO.show_inventory(lstOfCDObjects)        continue  # start loop back at top.        # show user current inventory        elif strChoice == 'i':        IO.show_inventory(lstOfCDObjects)        continue  # start loop back at top.        # let user save inventory to file        elif strChoice == 's':        IO.show_inventory(lstOfCDObjects)        strYesNo = input('Save this inventory to file? [y/n] ').strip().lower()        if strYesNo == 'y':            FileIO.save_inventory(lstOfCDObjects, strFileName)        else:            input('The inventory was NOT saved to file. Press [ENTER] to return to the menu.')        continue  # start loop back at top.        else:        print('General Error')